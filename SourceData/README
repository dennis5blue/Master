Execute from step1 to step7 and you can get the input data for our scheduling algorithm

1. Enter the folder of your target test version (e.g. ./test8/)

2. Make sure the following folders are existed in ./test8/
   (1) cfg:             Save the configure files of JMVC
			(Note that you can use genCfg.sh to generate configure files)
   (2) jmvcTempFiles:   Save the temp files generated wile running JMVC
   (3) png:             Save the origin image data
			Image must also contains in this folder (index starts with 1)
   (4) yuv:             Save the image raw data (create by the python script yuv_gen.py)
   (5) outFiles:	Save the ouput txt files (amount of encoding bits)
   (6) temp:		For temp files generated by running on cluster
   (7) log:		For log files generated by running on cluster

3. Make sure the following scripts are existed in ./test8/
   If not, copy from the folder of other test versions
   (1) encode_phase0.py: Use for independet encoding each camera's frame (i.e. as an I-frame)
   (2) encode_phase1.py: Use for dependet encoding each camera's frame (i.e as a P-frame)
   (3) yuv_gen.py:       Use for generating yuv files of each png image
   (4) parse.py:	 Use for parsing useful data (i.e number of encoding bits)

4. Run yuv_gen.py to get yuv raw datas
   $ python yuv_gen.py

5. Run encode_phase0.py to get independet coding bits
   $ python encode_phase0.py

6. Run encode_phase1.py to get dependet coding bits
   Note that you need to specify which camera is encoding, and step6 needs to run for N times (N is number of cameras)
   $ python encode_phase1.py --yuv camera_1.yuv --> which means that you encode camera 1 by referencing camera 1~N
   
   You can use encode_phase1_script.sh to throw job onto cluster
   $ sh encode_phase1_script.sh
   But before running encode_phase1_script.sh, you need to make sure two folders (./log and ./temp) are created 

7. Run parse.py to get useful data (will generate indepByte.txt and corrMatrix.txt)
   Note that if indepByte.txt or corrMatrix.txt already exists, you may need to remove them first so that no dulpicate data will created
   $ python parse.py


APPENDIX
$ /home/dennisyu/Documents/ffmpeg -s 1280x720 -pix_fmt yuv420p -i rec_0.yuv test.png --> Can use for reconstrucing png image
$ /home/dennisyu/Documents/JMVC/bin/PSNRStatic 1280 720 tmp_0.yuv rec_0.yuv --> Can use to get the PSNR of reconstructed image
